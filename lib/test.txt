
To-Do
 1. Fractions
+2. Tests
 3. expression as unit's val
+4. Revisar reduce y pasar a map
+5. mk :m recurse down primero
 6. Going multiprocess
 7. Functions! Derivate! Integrate!

import Exun
import Exun.Eq
import Exun.Pattern
import Exun.UI
import Exun.Simpl
aexp = {{:m, :mult}, list} = Exun.parse_text "2*x"
aast = Exun.parse_text("u*v'x")
[{:ok,m1},{:ok,m2}]=Exun.Pattern.match_ast(aast, aexp)
x="x"
uvvdu = Exun.parse_text("u*v-$v*u'#{x},#{x}")
Exun.Simpl.mkrec(Exun.replace uvvdu,m1)


import Exun.Fun
import Exun.Collect
import Exun.Matrix
a = Exun.parse_text "{{1,2,3},{4,5,6},{7,8,9}}"
b = Exun.parse_text "{{9,8,7},{6,5,4},{3,2,1}}"
Exun.Matrix.mult_matrix a,b

a = Exun.parse_text "{{1,x^2,x^3},{x^4,x^5,x^6}}"
b = Exun.parse_text "{{x^-6,x^-5},{x^-4,x^-3},{x^-2,1/x}}"
Exun.Matrix.mult_matrix a,b


Exun.Collect.coll {{:m, :mult},[{:elev, {:vari, "x"}, {:numb, -3}}, {:elev, {:vari, "x"}, {:numb, 5}}]}
